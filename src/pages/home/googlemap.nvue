<template>
    <view class="googlemap">
        <map style="width: 750rpx; height: 700rpx;" class="map" :latitude="lat" :longitude="lng" :markers="covers" >
		</map>
    </view>
</template>

<script>
    export default {
        data () {
            return {
                lat: "-33.874116301818525",
                lng: "151.20795194094683",
                apiKey: "AIzaSyCW1YKJStLW3GXfu0ghMNiN_1ww9_Jz968",
                googleMapUrl: 'static/googlemap.html',
                userCn: {
                    lat: "",
                    lng: ""
                },
                covers:[
                    {
                        id:1,
                        latitude: -33.874116301818525,
                        longitude: 151.20795194094683,
                        iconPath: '/static/red.png'
                    }
                ],
               
                 
                markersAu: [
                    { lat: -33.87401179677703, lng: 151.20792194207306, title: "Check In" },
                    { lat: -33.86979975181109, lng: 151.21025362784482, title: "Meeting" },
                    { lat: -33.87467096986611, lng: 151.20780392488683, title: "Check Out" },
                ]
            }
        },
        methods: {
            goBack () {
                uni.switchTab({ url: "/pages/home/clock-in" });
            },
            async getLocation () {
                return new Promise((resolve, reject) => {
                    uni.getLocation({
                        type: "wgs84",
                        success: (res) => {
                            this.userCn.lat = res.latitude;
                            this.userCn.lng = res.longitude;
                            resolve({ lat: this.userCn.lat, lng: this.userCn.lng });
                        },
                        fail: (err) => {
                            console.error("failed GPS:", err);
                            uni.showToast({ title: "cannot get location", icon: "none" });
                            reject(err);
                        }
                    });
                });
            }
        },
        async mounted () {
            await this.getLocation();
            const encodedMarkers = encodeURIComponent(JSON.stringify(this.markersAu));
            this.googleMapUrl = `static/googlemap.html?markers=${encodedMarkers}`;
        }
    }
</script>

<style scoped lang="scss">
     .googlemap{
        margin-top: 200rpx;
        border:1px solid red;
        height: 700rpx;
        width:750rpx;
        border-radius: 10rpx;
     }
     .map{
        border-radius: 10rpx;
     }
</style>